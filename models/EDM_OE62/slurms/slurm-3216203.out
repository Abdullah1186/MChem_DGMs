/var/spool/slurmd/job3216203/slurm_script: line 11: module: command not found
/var/spool/slurmd/job3216203/slurm_script: line 12: module: command not found
/var/spool/slurmd/job3216203/slurm_script: line 13: module: command not found
/users/afekaiki/EDM/myenv/lib/python3.8/site-packages/numpy/core/fromnumeric.py:43: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  result = getattr(asarray(obj), method)(*args, **kwds)
wandb: Currently logged in as: abdullahalfekaiki (abdullahalfekaiki-university-of-warwick) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Tracking run with wandb version 0.19.6
wandb: Run data is saved locally in /users/afekaiki/EDM/wandb/run-20250301_230547-i6yziwwt
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run edm_oe62_resume
wandb: ‚≠êÔ∏è View project at https://wandb.ai/abdullahalfekaiki-university-of-warwick/EDM_oe62
wandb: üöÄ View run at https://wandb.ai/abdullahalfekaiki-university-of-warwick/EDM_oe62/runs/i6yziwwt
/users/afekaiki/EDM/e3_diffusion_for_molecules/main_oe62.py:204: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  flow_state_dict = torch.load(join(args.resume, 'flow.npy'))
Namespace(aggregation_method='sum', attention=True, augment_noise=0, batch_size=64, break_train_epoch=False, clip_grad=True, condition_time=True, conditioning=[], context_node_nf=0, cuda=True, current_epoch=436, data_augmentation=False, dataset='oe62', dequantization='argmax_variational', diffusion_loss_type='l2', diffusion_noise_precision=1e-05, diffusion_noise_schedule='polynomial_2', diffusion_steps=1000, dp=True, ema_decay=0.9999, exp_name='edm_oe62_resume', filter_molecule_size=None, filter_n_atoms=None, generate_epochs=1, include_charges=False, inv_sublayers=1, lr=0.0001, model='egnn_dynamics', n_epochs=3000, n_layers=4, n_report_steps=50, n_stability_samples=500, nf=256, no_cuda=False, no_wandb=False, norm_constant=1, normalization_factor=1.0, normalize_factors=[1, 4, 10], num_workers=0, ode_regularization=0.001, online=True, probabilistic_model='diffusion', remove_h=False, resume='/users/afekaiki/EDM/outputs/edm_oe62', save_model=True, sequential=False, sin_embedding=False, start_epoch=436, tanh=True, test_epochs=15, trace='hutch', visualize_every_batch=10000, wandb_usr=None)
Namespace(aggregation_method='sum', attention=True, augment_noise=0, batch_size=64, break_train_epoch=False, clip_grad=True, condition_time=True, conditioning=[], context_node_nf=0, cuda=True, current_epoch=436, data_augmentation=False, dataset='oe62', dequantization='argmax_variational', diffusion_loss_type='l2', diffusion_noise_precision=1e-05, diffusion_noise_schedule='polynomial_2', diffusion_steps=1000, dp=True, ema_decay=0.9999, exp_name='edm_oe62_resume', filter_molecule_size=None, filter_n_atoms=None, generate_epochs=1, include_charges=False, inv_sublayers=1, lr=0.0001, model='egnn_dynamics', n_epochs=3000, n_layers=4, n_report_steps=50, n_stability_samples=500, nf=256, no_cuda=False, no_wandb=False, norm_constant=1, normalization_factor=1.0, normalize_factors=[1, 4, 10], num_workers=0, ode_regularization=0.001, online=True, probabilistic_model='diffusion', remove_h=False, resume='/users/afekaiki/EDM/outputs/edm_oe62', save_model=True, sequential=False, sin_embedding=False, start_epoch=436, tanh=True, test_epochs=15, trace='hutch', visualize_every_batch=10000, wandb_usr=None)
Entropy of n_nodes: H[N] -4.140960693359375
alphas2 [9.99990000e-01 9.99988000e-01 9.99982000e-01 ... 2.59676966e-05
 1.39959211e-05 1.00039959e-05]
gamma [-11.51291546 -11.33059532 -10.92513058 ...  10.55863126  11.17673063
  11.51251595]
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33medm_oe62_resume[0m at: [34mhttps://wandb.ai/abdullahalfekaiki-university-of-warwick/EDM_oe62/runs/i6yziwwt[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250301_230547-i6yziwwt/logs[0m
Traceback (most recent call last):
  File "/users/afekaiki/EDM/e3_diffusion_for_molecules/main_oe62.py", line 280, in <module>
    main()
  File "/users/afekaiki/EDM/e3_diffusion_for_molecules/main_oe62.py", line 204, in main
    flow_state_dict = torch.load(join(args.resume, 'flow.npy'))
  File "/users/afekaiki/EDM/myenv/lib/python3.8/site-packages/torch/serialization.py", line 1065, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/users/afekaiki/EDM/myenv/lib/python3.8/site-packages/torch/serialization.py", line 468, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/users/afekaiki/EDM/myenv/lib/python3.8/site-packages/torch/serialization.py", line 449, in __init__
    super().__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: '/users/afekaiki/EDM/outputs/edm_oe62/flow.npy'
